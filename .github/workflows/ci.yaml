name: Dart CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: "0 3 * * *"

env:
  PUB_ENVIRONMENT: bot.github

jobs:
  # Check code formatting and static analysis on a single OS (linux)
  # against Dart dev.
  analyze:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sdk: [dev]
    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1.0
        with:
          sdk: ${{ matrix.sdk }}
      - id: install
        name: Install dependencies
        run: dart pub get
      - name: Check formatting
        run: dart format --output=none --set-exit-if-changed .
        if: always() && steps.install.outcome == 'success'
      - name: Analyze code
        run: dart analyze --fatal-infos
        if: always() && steps.install.outcome == 'success'

  # Run tests on a matrix consisting of two dimensions:
  # 1. OS: ubuntu-latest, (macos-latest, windows-latest)
  # 2. release channel: dev
  test:
    needs: analyze
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Add macos-latest and/or windows-latest if relevant for this package.
        os: [macos-latest, ubuntu-latest]
        sdk: [2.12.0, dev]
    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1.0
        with:
          sdk: ${{ matrix.sdk }}
      - id: install
        name: Install dependencies
        run: dart pub get
      - name: Run VM tests
        run: dart test --platform vm --test-randomize-ordering-seed=random
        if: always() && steps.install.outcome == 'success'
      - name: Run Chrome tests
        run: dart test --platform chrome --test-randomize-ordering-seed=random
        if: always() && steps.install.outcome == 'success'
  coverage:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps: 
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1.0
        with:
          sdk: 2.12.0
      - id: install
        name: Install dependencies
        run: dart pub get
      - name: Run VM tests
        run: |
          dart test --platform vm --test-randomize-ordering-seed=random --coverage=./coverage
          dart pub global activate coverage
          dart pub global run coverage:format_coverage  --report-on=lib --lcov -o ./coverage/lcov.info -i ./coverage
          dart genhtml -o ./coverage/report ./coverage/lcov.info
      - name: Coverage report
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage/
          # token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          # files: ./coverage1.xml,./coverage2.xml # optional
          #flags: unittests # optional
          name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)

